''''''
'''
Python 代码性能优化
   https://blog.csdn.net/u010159842/article/details/54573102
   Profile是Python语言内置的性能分析工具，它能够有效地描述程序运行的性能状况，提供各种统计数据帮助程序员找出程序中的性能瓶颈。
改进算法，选择合适的数据结构
          良好的算法对性能起到关键作用，因此性能改进的首要点是对算法改进

算法时间复杂性的排序依次是
               对成员的查找访问等操作，字典（dictionary）要比列表（list）更快
               集合（set）的并、交、差的操作比列表（list）的迭代要快
               
循环优化的基本原则：
       尽量减少循环过程中的计算量，在多重循环的时候，尽量将内层的计算提到上一层。

字符串的优化：
              Python的字符串对象是不可改变的。字符串连接的使用尽量使用 join() 而不是 +。
               当对字符串可以使用正则表达式或者内置函数处理时，选择内置函数。

使用列表解析和生成器表达式：
              列表解析要比在循环中重新构建一个新的list 更为高效，因此可以利用这一特性来提高运行的效率。
              
'''
a='cbc'
c=''.join(a)
print(c)


'''
为什么 keys() 函数的调用复杂度过高？

keys(): Return a new view of the dic5onary’s keys(docs.python.org)
原因：每调用一次keys()函数，系统就会生成一个新的字典迭代器，如果这个生成过程重复50万次，…...
优化：使用 in 操作符直接代替keys()，不再每次生成新的迭代器,即用字典原有的迭代器。
'''
dict={'a':1,'b':2,'c':3,'d':4,'e':5}
list1=dict.keys()
print(list1)
list2=[]
for i in dict.keys():
      list2.append(i)
print(list2)

'''
Python 字典中使用了 hash table，因此查找操作的复杂度为 O(1)，
而 list 实际是个数组，在 list 中，查找需要遍历整个 list，其复杂度为 O(n)，
因此对成员的查找访问等操作字典要比 list 更快。
'''
'''
哈希方法在“键- 值对”的存储位置与它的键之间建立一个确定的对应函数关系 hash() ，
使得每一个键与结构中的一个唯一的存储位置相对应：
存储位置=hash( 键 )
在搜索时，首先对键进行hash 运算，把求得的值当做“键 - 值对”的存储位置，在结构中按照此位置取“键 - 值对”，
若键相等，则表示搜索成功。在存储“键 - 值对”的时候，依照相同的 hash 函数计算存储位置，并按此位置存放，
这种方法就叫做哈希方法，也叫做散列方法。在哈希方法中使用的转换函数 hash 被称作哈希函数 ( 或者散列函数 ) 。
按照此算法构造出来的表叫做哈希表 ( 或者散列表 ) 。哈希函数建立了从“键- 值对”到哈希表地址集合的一个映射，
有了哈希函数，我们就可以根据键来确定“键 - 值对”在哈希表中的位置的地址。使用这种方法由于不必进行多次键的比较，
所以其搜索速度非常快，很多系统都使用这种方法进行数据的组织和检索。


举一个例子，有一组“键值对”：<5, ” tom ” >、 <8, ” Jane ” >、 <12, ” Bit ” >、 <17, ” Lily ” >、 <20, ” sunny ” >，
我们按照如下哈希函数对键进行计算 :hash(x)=x%17+3 ，得出如下结果： hash(5)=8 、 hash(8)=11 、 hash(12)=15 、 hash(17)=3 、 hash(20)=6 。
我们把 <5, ” tom ” >、 <8, ” Jane ” >、 <12, ” Bit ” >、 <17, ” Lily ” >、 <20, ” sunny ” >
分别放到地址为 8 、 11 、 15 、 3 、 6 的位置上。
当要检索 17 对应的值的时候，只要首先计算 17 的哈希值为 3 ，然后到地址为 3 的地方去取数据就可以找到 17 对应的数据是“ Lily ”了，



'''