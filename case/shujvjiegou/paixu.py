list1=[3,4,1,9,0,5,63,34]
'''
分析第一次排序：拿list1的第一个元素和列表中后面的元素做对比，根据规则进将大的或者小的进行换位置。
排序完成后形成新的列表，列表中[0]肯定是最小/大的值。
第二次排序，拿列表中第二个元素依次去比较后面的。
最外圈控制一共循环的次数，即一共需要循环执行多少次【0至列表数-1】
内圈控制每次比较的次数，第一次比较长度数-1 ，第二次比较长数-2，即范围为【0，长度数-1-第几次循环的值】
在进行比较的时候是如何判断的。即参与内圈比赛的i值，当左右两边发生变化时，交换位置。
如，拿第一个值和第二个值比较后，大的元素往右移，和小的值交换位置。
'''
#  if  (arr[j]>arr[j+1]){
# 　　　　　　　　　　int temp=arr[j];
# 　　　　　　　　　　arr[j]=arr[j+1];
# 　　　　　　　　　　arr[j+1]=temp;
'''java排序，还需要中间变量进行接收下，传递值。临时变量=列表1值；列表1=列表2；列表2=临时变量
python就不需要了,这里用到了平衡赋值   a , b=b ,a     a=b   b=a 
  还有一种非平衡赋值。如 list1=[1,2,3,4,5]
            a，*b=list1      a = 1  b=[2,3,4,5]


'''
#           if arr[i] > arr[i + 1]:
#                    arr[i], arr[i + 1] = arr[i + 1], arr[i]
#
#
arr = [7, 4, 3, 67, 34, 1, 8]

def bubble_sort(arr):
    n = len(arr)
    for j in range(0, n - 1):
        for i in range(0, n - 1 - j):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1]=arr[i + 1], arr[i]


bubble_sort(list1)
print(list1)  # [1, 3, 4, 7, 8, 34, 67]


